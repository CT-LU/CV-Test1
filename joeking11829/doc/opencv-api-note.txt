# Note about OpenCV

cv::cvtColor(InputArray src, OutputArray dst, int code, int dstCn)

將圖片轉換到另一個色彩空間

src: 輸入的圖片
dst: 輸出的圖片
code: the color conversion code (ex: CV_RGB2GRAY)
dstCn: Number of Channel

cv::blur(InputArray src, OutputArray dst, Size ksize, Point anchor=Point(-1,-1), int borderType=BORDER_DEFAULT)

使用 Normalized box filter 模糊圖片

cv::threshold(InputArray src, InputArray dst, double thresh, double maxValue, int thresholdType)

使用一個固定的 Threshold Value 來分割區間, 可以用來得到二值圖或是去除噪聲.

src: 輸入的圖片
dst: 輸出的圖片
thresh: threshold value
maxVlue: maximum value to use with the THRESH_BINARY and THRESH_BINARY_INV
thresholdType: thresholding type
	a. THRESH_BINARY if src(x,y) > thresh then maxValue else 0
	b. THRESH_BINARY if src(x,y) > thresh then 0 else maxValue
	c. THRESH_TOZERO if src(x,y) > thresh then originValue else 0
	d. THRESH_TOZERO_INV if src(x,y) > thresh then 0 else originValue
	e. THRESH_TRUNC if src(x,y) > thresh then thresholdValue else 0

cv::adaptiveThreshold ( InputArray src, OutputArray dst, doble maxValue, 
						   int adaptiveMethod, int thresholdType, int blockSize, double C )
自適應型二值化方法
針對每一個點都計算出一個 threshold value 用以判斷最終要填入什麼值.

src: 輸入的圖片
dst: 輸出的圖片
maxValue: maximum value to use with the THRESH_BINARY and THRESH_BINARY_INV
adaptiveMethod: 
	ADAPTIVE_THRESH_MEAN_C: 使用平均加權方式計算
	ADAPTIVE_THRESH_GAUSSIAN_C 使用高斯函數進行計算
thresholdType:
	THRESH_BINARY: if value > thresh then maxValue else 0
	THRESH_BINARY_INV if value > thresh then 0 else maxValue
blockSize: 計算時使用的矩陣大小, 必須是大於 1 的奇數
C: adaptiveMehod 產出 Value 的偏移量

cv::Canny( InputArray imgae, OutputArray edges, double threshold1, double threshold2, int apertureSize=3, bool L2gradient=false )

使用 Canny algorithm 找出圖片邊緣

image: 8-bit input image (Gray image)
edges: output edge map, single channels 8-bit image
threshold1: if value < threshold1 then drop
threshold2: if value > threshold2 then drop
apertureSize: Sobel 矩陣大小 (默認是3 -> 3*3 矩陣)
L2gradient: default is false

cv::erode(InputArray src, OutputArray dst, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar& borderValue=morphologyDefaultBorderValue())

Erodes an image by using a specific structuring element

src: 輸入的圖片
dst: 輸出的圖片
kernel: 用來侵蝕的矩陣大小 預設為 Mat() -> 3 * 3 長方形結構
anchor:
iterations: 重複侵蝕的次數

cv::dilate(InputArray src, OutputArray dst, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar& borderValue=morphologyDefaultBorderValue())

Dilates an image by using a specific structuring element

src: 輸入的圖片
dst: 輸出的圖片
kernel: 用來膨脹的矩陣大小 預設為 Mat() -> 3 * 3 長方形結構
anchor:
iterations: 重複膨脹的次數

cv::morphologyEx(InputArray src, OutputArray dst, int op, inputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar & borderValue=morphologyDefaultBorderValue())

Performs advanced morphological transformations

src: 輸入圖片
dst: 輸出圖片
op:
	MORPH_OPEN (2) 開運算
	MORPH_CLOSE (3) 閉運算
	MORPH_GRADIENT (4) 梯度運算
	MORPH_TOPHAT (5) 頂帽
	MORPH_BLACKHAT (6) 黑帽
element: Structuring element


cv::findContours(InputOutputArray image, OutputArrayOfArrays contours, OutputArray hierarchy, int mode, int method, Point offset = Point() )

iamge: 輸入圖片
contours: Detected contours. Each contour is stored as a vector of points
hierarchy: Optional output vector, containing information about the image topology
mode:
method:
offset:


cv::contourArea(InputArray contour, bool oriented=false)

Calculates a contour area

contour: Input vector of 2D points, stored in std::vector or Mat
oriented: Oriented area flag


cv::drawContours(InputOutputArray image, InputOutputOfArrays contours, int contourIdx, const Scalar& color, int thickness=1, int lineType=LINE_8, InputArray hierarchy=noArray(), int maxLevel=INT_MAX, Point offset=Point())

Draws contours outlines or filled contours.

image: Destination iamge.
contours: All the input contours. Each contour is stored as a point vector.
contourIdx: parameter indicating a contour to draw.
color: Color of the contours.
thickness: Thickness of lines the contours as drawn with.
lineType: Line connectivity.
hierarchy: Optional information about hierarchy.
maxLevel: Maximal level for drawn contours.
offset: Optional contour shift parameter


cv::convexHull(InputArray points, OutputArray hull, bool clockwise=false, bool returnPoints=true)

Find the convex hull of a point set.

points: Input 2D point set, stored in std::vector or Mat
hull: Output convex hull
clockwise: Orientation flag
returnPoints: Operation flag


