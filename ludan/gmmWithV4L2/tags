!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CAM0_DEFAULT_RES	v4l2_grabber.h	20;"	d
CAM0_DEF_DEVICE	v4l2_grabber.h	44;"	d
CAM0_DEF_PIXELFORMAT	v4l2_grabber.h	42;"	d
CAM0_MASK	v4l2_grabber.h	22;"	d
CAM1_DEFAULT_RES	v4l2_grabber.h	21;"	d
CAM1_DEF_DEVICE	v4l2_grabber.h	45;"	d
CAM1_DEF_PIXELFORMAT	v4l2_grabber.h	43;"	d
CAM1_MASK	v4l2_grabber.h	23;"	d
CAMERA_NO	v4l2_grabber.h	19;"	d
CAM_TYPE	v4l2_grabber.h	/^enum CAM_TYPE {$/;"	g
CLEAR	v4l2_grabber.h	14;"	d
DEBUG	v4l2_grabber.c	46;"	d	file:
DUAL_CAMERA	v4l2_grabber.h	/^	DUAL_CAMERA,   \/\/dual camera: F100*2$/;"	e	enum:CAM_TYPE
ERR_NOTSUPPORTED	v4l2_grabber.h	17;"	d
ETRON_CAMERA	v4l2_grabber.h	/^	ETRON_CAMERA	\/\/ToDo: Etron StereoCamera eSP870$/;"	e	enum:CAM_TYPE
FAILED	v4l2_grabber.h	16;"	d
PIXEL_FOMRAT	v4l2_grabber.h	/^enum PIXEL_FOMRAT { \/\/Supported pixel formats$/;"	g
RES_1280x720	v4l2_grabber.h	/^	RES_1280x720,$/;"	e	enum:SUPPORT_RESOLUTION
RES_160x120	v4l2_grabber.h	/^	RES_160x120,$/;"	e	enum:SUPPORT_RESOLUTION
RES_176x144	v4l2_grabber.h	/^	RES_176x144,$/;"	e	enum:SUPPORT_RESOLUTION
RES_1920x1080	v4l2_grabber.h	/^	RES_1920x1080$/;"	e	enum:SUPPORT_RESOLUTION
RES_320x240	v4l2_grabber.h	/^	RES_320x240,$/;"	e	enum:SUPPORT_RESOLUTION
RES_352x288	v4l2_grabber.h	/^	RES_352x288,$/;"	e	enum:SUPPORT_RESOLUTION
RES_640x480	v4l2_grabber.h	/^	RES_640x480,$/;"	e	enum:SUPPORT_RESOLUTION
RES_800x600	v4l2_grabber.h	/^	RES_800x600,$/;"	e	enum:SUPPORT_RESOLUTION
RGB24	v4l2_grabber.h	/^	RGB24$/;"	e	enum:PIXEL_FOMRAT
SUCCESS	v4l2_grabber.h	15;"	d
SUPPORT_RESOLUTION	v4l2_grabber.h	/^enum SUPPORT_RESOLUTION { \/\/supported resoultions$/;"	g
YUYV	v4l2_grabber.h	/^	YUYV,     $/;"	e	enum:PIXEL_FOMRAT
__V4L2_GRABBER_H	v4l2_grabber.h	2;"	d
alpha	main.cpp	/^const double alpha = 0.00005;$/;"	v
b_mean	main.cpp	/^	double b_mean;$/;"	m	struct:gaussian_model	file:
buf	v4l2_grabber.c	/^struct v4l2_buffer     buf[CAMERA_NO];$/;"	v	typeref:struct:v4l2_buffer
buffer	v4l2_grabber.h	/^struct buffer {$/;"	s
buffers	v4l2_grabber.c	/^struct retrieve_buffer buffers[CAMERA_NO];   \/\/mmap to driver$/;"	v	typeref:struct:retrieve_buffer
camera_nodes	v4l2_grabber.c	/^char *camera_nodes[CAMERA_NO]={$/;"	v
camera_settings	v4l2_grabber.h	/^struct camera_settings {$/;"	s
configGrabber	v4l2_grabber.c	/^int configGrabber(struct camera_settings settings, int index) {$/;"	f
copy2IamgeMem	v4l2_grabber.c	/^int copy2IamgeMem(void *start, unsigned int length,struct buffer data_buffer) {$/;"	f
covariance	main.cpp	/^	double covariance;$/;"	m	struct:gaussian_model	file:
covariance_threshold	main.cpp	/^const double covariance_threshold = (2.5*2.5);$/;"	v
createGaussianComponentForPixel	main.cpp	/^gaussian_model* createGaussianComponentForPixel(double blue_value, double green_value, double red_value)$/;"	f
createNodeForPixel	main.cpp	/^pixel_gmm_node* createNodeForPixel(double blue_value, double green_value, double red_value)$/;"	f
def_covariance	main.cpp	/^const double def_covariance = 11.0;$/;"	v
def_weight	main.cpp	/^const double def_weight = 0.00005;$/;"	v
deleteGaussianComponent	main.cpp	/^void deleteGaussianComponent()$/;"	f
fd	v4l2_grabber.c	/^int fd[CAMERA_NO] = {-1};$/;"	v
fmt	v4l2_grabber.c	/^struct v4l2_format fmt[CAMERA_NO];$/;"	v	typeref:struct:v4l2_format
freeBuffers	main.cpp	/^void freeBuffers(struct buffer *data_buffer) {$/;"	f
g_mean	main.cpp	/^	double g_mean;$/;"	m	struct:gaussian_model	file:
gaussian_component_rear	main.cpp	/^	gaussian_model* gaussian_component_rear;$/;"	m	struct:pixel_gmm_node	file:
gaussian_component_start	main.cpp	/^	gaussian_model* gaussian_component_start;$/;"	m	struct:pixel_gmm_node	file:
gaussian_model	main.cpp	/^struct gaussian_model$/;"	s	file:
gaussian_rear	main.cpp	/^gaussian_model *gaussian_start, *gaussian_rear, *gaussian_runtime, *gaussian_reorder_runtime, *gaussian_tmp_runtime;$/;"	v
gaussian_reorder_runtime	main.cpp	/^gaussian_model *gaussian_start, *gaussian_rear, *gaussian_runtime, *gaussian_reorder_runtime, *gaussian_tmp_runtime;$/;"	v
gaussian_runtime	main.cpp	/^gaussian_model *gaussian_start, *gaussian_rear, *gaussian_runtime, *gaussian_reorder_runtime, *gaussian_tmp_runtime;$/;"	v
gaussian_start	main.cpp	/^gaussian_model *gaussian_start, *gaussian_rear, *gaussian_runtime, *gaussian_reorder_runtime, *gaussian_tmp_runtime;$/;"	v
gaussian_tmp_runtime	main.cpp	/^gaussian_model *gaussian_start, *gaussian_rear, *gaussian_runtime, *gaussian_reorder_runtime, *gaussian_tmp_runtime;$/;"	v
grab_pxlfmt	v4l2_grabber.c	/^__u32 grab_pxlfmt[]={$/;"	v
grab_resolution	v4l2_grabber.h	/^struct grab_resolution {$/;"	s
height	v4l2_grabber.h	/^        __u32                   height;$/;"	m	struct:grab_resolution
initBuffers	main.cpp	/^int initBuffers(struct buffer *data_buffer, int length) {$/;"	f
initGrabber	v4l2_grabber.c	/^int initGrabber(int type) {$/;"	f
insertGaussianComponent	main.cpp	/^void insertGaussianComponent(gaussian_model* component)$/;"	f
insertNode	main.cpp	/^void insertNode(pixel_gmm_node* node)$/;"	f
length	v4l2_grabber.h	/^        size_t length;$/;"	m	struct:buffer
length	v4l2_grabber.h	/^        size_t length;$/;"	m	struct:retrieve_buffer
main	main.cpp	/^int main(int argc, char** argv){$/;"	f
max_number_of_gaussian_components	main.cpp	/^const int max_number_of_gaussian_components = 3;$/;"	v
next	main.cpp	/^	gaussian_model* next;$/;"	m	struct:gaussian_model	file:
next	main.cpp	/^	pixel_gmm_node* next;$/;"	m	struct:pixel_gmm_node	file:
number_of_gaussian_components	main.cpp	/^	int number_of_gaussian_components;$/;"	m	struct:pixel_gmm_node	file:
pi	main.cpp	/^const double pi = 3.14159;$/;"	v
pixel_gmm_node	main.cpp	/^struct pixel_gmm_node$/;"	s	file:
pixel_node_rear	main.cpp	/^pixel_gmm_node *pixel_node_start, *pixel_node_rear, *pixel_node_runtime;$/;"	v
pixel_node_runtime	main.cpp	/^pixel_gmm_node *pixel_node_start, *pixel_node_rear, *pixel_node_runtime;$/;"	v
pixel_node_start	main.cpp	/^pixel_gmm_node *pixel_node_start, *pixel_node_rear, *pixel_node_runtime;$/;"	v
pixelfmt_index	v4l2_grabber.h	/^	int pixelfmt_index; \/\/the index in support list of Pixel formats$/;"	m	struct:camera_settings
previous	main.cpp	/^	gaussian_model* previous;$/;"	m	struct:gaussian_model	file:
r_mean	main.cpp	/^	double r_mean;$/;"	m	struct:gaussian_model	file:
res_index	v4l2_grabber.h	/^	int res_index; \/\/the index in support list of resolutions$/;"	m	struct:camera_settings
res_list	v4l2_grabber.c	/^struct grab_resolution res_list[]={$/;"	v	typeref:struct:grab_resolution
retrieveImage	v4l2_grabber.c	/^int retrieveImage(struct buffer data_buffers[]) {$/;"	f
retrieve_buffer	v4l2_grabber.h	/^struct retrieve_buffer {$/;"	s
saveImage	v4l2_grabber.c	/^int saveImage(const char *ppm0, const char *ppm1) {$/;"	f
shutdownGrabber	v4l2_grabber.c	/^int shutdownGrabber(void) {$/;"	f
start	v4l2_grabber.h	/^        int   *start;$/;"	m	struct:buffer
start	v4l2_grabber.h	/^        void   *start;$/;"	m	struct:retrieve_buffer
startGrabber	v4l2_grabber.c	/^int startGrabber(void) {$/;"	f
stopGrabber	v4l2_grabber.c	/^int stopGrabber(void) {$/;"	f
weight	main.cpp	/^	double weight;$/;"	m	struct:gaussian_model	file:
width	v4l2_grabber.h	/^	__u32                   width;$/;"	m	struct:grab_resolution
write2File	v4l2_grabber.c	/^int write2File(int index, unsigned int length,const char *file_name) {$/;"	f
xioctl	v4l2_grabber.c	/^static void xioctl(int fh, int request, void *arg)$/;"	f	file:
